-- Parameter Auto-Scale
local RS   = game:GetService("ReplicatedStorage")
local Reqs = RS.TrainEquipment.Remote
local Sys  = RS.TrainSystem.Remote
local EquipStation = Reqs.ApplyTakeUpStationaryTrainEquipment  
local Stationary   = Reqs.ApplyStationaryTrain                  
local Mobile       = Reqs.ApplyMobileTrain                      
local Speed        = Sys.TrainSpeedHasChanged  

-- Auto-detect optimal settings
local function getOptimalSettings()
    local fps = workspace:GetRealPhysicsFPS()
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
    
    -- Auto-scale THREADS berdasarkan FPS dan ping
    local threads
    if fps >= 55 and ping < 100 then
        threads = 200  -- Koneksi bagus
    elseif fps >= 45 and ping < 150 then
        threads = 150  -- Koneksi sedang
    elseif fps >= 30 and ping < 200 then
        threads = 100  -- Koneksi lemah
    else
        threads = 50   -- Koneksi buruk
    end
    
    -- Auto-scale TrainSpeed berdasarkan performa
    local trainSpeed
    if fps >= 55 then
        trainSpeed = math.huge  -- Max speed
    elseif fps >= 45 then
        trainSpeed = 10000      -- High speed
    elseif fps >= 30 then
        trainSpeed = 5000       -- Medium speed
    else
        trainSpeed = 2000       -- Low speed
    end
    
    return threads, trainSpeed
end

local THREADS, TrainSpeed = getOptimalSettings()
local config = {
    TrainSpeed = TrainSpeed,
    bdelay = 0,
    threads = {},
    autoAdjust = true  -- Toggle auto-adjust
}

print(string.format("üöÑ Auto-Scale: THREADS=%d, TrainSpeed=%s", THREADS, tostring(TrainSpeed)))

-- Einmalige Ausr√ºstung
do
    local ok, err = pcall(function()
        EquipStation:InvokeServer("2008")
    end)
    if not ok then warn("EquipStation failed:", err) end
end

local function tickPack()
    local ok, err = pcall(function()
        local r1 = Stationary:InvokeServer()
        local r2 = Mobile:InvokeServer()
        Speed:FireServer(config.TrainSpeed)
    end)
    if not ok then
        warn("tickPack error:", err)
    end
end

local function stopAllThreads()
    running = false
    for _, thread in pairs(config.threads) do
        coroutine.close(thread)
    end
    config.threads = {}
end

local function startAll()
    stopAllThreads()
    if running then return end
    running = true
    
    -- Re-calculate optimal settings saat start
    if config.autoAdjust then
        THREADS, config.TrainSpeed = getOptimalSettings()
        print(string.format("üîÑ Re-adjusted: THREADS=%d, TrainSpeed=%s", THREADS, tostring(config.TrainSpeed)))
    end
    
    for i = 1, THREADS do
        local thread = coroutine.create(function()
            while running do
                tickPack()
                task.wait(config.bdelay)
            end
        end)
        table.insert(config.threads, thread)
        coroutine.resume(thread)
    end
    print("‚úÖ Started with " .. THREADS .. " threads")
end

-- Auto-adjustment setiap 30 detik
if config.autoAdjust then
    task.spawn(function()
        while true do
            task.wait(30)
            if running then
                local newThreads, newSpeed = getOptimalSettings()
                if newThreads ~= THREADS or newSpeed ~= config.TrainSpeed then
                    print("‚ö° Performance changed, restarting...")
                    THREADS = newThreads
                    config.TrainSpeed = newSpeed
                    startAll()
                end
            end
        end
    end)
end

-- Hotkey F untuk stop
game:GetService("UserInputService").InputBegan:Connect(function(inp, gp)
    if gp then return end
    if inp.KeyCode == Enum.KeyCode.F then
        if running then
            stopAllThreads()
            print("‚èπÔ∏è Stopped")
        end
    end
end)

-- Hotkey R untuk restart manual
game:GetService("UserInputService").InputBegan:Connect(function(inp, gp)
    if gp then return end
    if inp.KeyCode == Enum.KeyCode.R then
        print("üîÑ Manual restart...")
        startAll()
    end
end)

-- Auto-start
startAll()
